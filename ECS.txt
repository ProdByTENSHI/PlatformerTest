ECS:
	-> Global Unique_ptr defined in Globals.h
	-> Entities hold no Data(Only their ID)
	-> Components hold Data
	-> Systems use one or more Component Types to do something with this Data

	-- Functionality
	-> Create Entity
	-> Destroy Entity
	-> Add Component<T>(Entity)
	-> Remove Component<T>(Entity)
	-> Get Component<T>(Entity)
	-> Get Component Type<T> -> Used for Setting System Signatures
	-> Serialize() -> Goes through all Entities and calls all their Components Serialize Function
	-> Deserialize() -> Spawns in the Entities with their Components and the Component Data -> For now just rebuild the whole Scene

	-- Components
		-> Each Component must derive from the Components Base Class
		-> Each Component has a Unique Flag to identify its type
		-> Each Component has a virtual Serialize and Deserialize Method
		-> For each Component Type there is a Map that holds all Entities and a Pointer to the Component

	-- Systems
		-> ECS holds a Unique_ptr for all Systems so they can be used globaly
		-> Each System has a Signature which is a Bitfield where the Values are the Component Types this System requires
		-> Each System must derive from the System Base Class
		-> The System Base Class has a Vector Member that stores all Entities that have the Components